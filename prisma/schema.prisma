generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Role {
  USER
  ADMIN
}

enum FixtureStatus {
  SCHEDULED
  LIVE
  FINISHED
  POSTPONED
  CANCELLED
}

enum GameweekStatus {
  UPCOMING // Currently not in use due to limited cron jobs per project. "ACTIVE" used on creation of new gameweek.
  ACTIVE
  COMPLETED
}

model User {
  id                  String               @id @default(cuid())
  name                String?
  email               String?              @unique
  avatar              String?
  createdAt           DateTime             @default(now()) @map(name: "created_at")
  updatedAt           DateTime             @updatedAt @map(name: "updated_at")
  role                Role                 @default(USER)
  gameweekPredictions GameweekPrediction[]
  createdLeagues      League[]
  leagues             LeagueMember[]
  fixturePredictions  Prediction[]

  @@map(name: "users")
}

model Season {
  id                 String               @id @default(cuid())
  name               String // e.g., "2023/2024"
  startDate          DateTime
  endDate            DateTime
  isActive           Boolean              @default(false) // Indicates the current active season
  currentGameweekId  String?              @unique // Mark this field as unique
  currentGameweek    Gameweek?            @relation("CurrentGameweek", fields: [currentGameweekId], references: [id])
  gameweeks          Gameweek[]           @relation("SeasonGameweeks")
  leagues            LeagueSeason[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  LeagueMember       LeagueMember[]
  GameweekPrediction GameweekPrediction[]
}

model League {
  id                String         @id @default(cuid())
  name              String
  createdAt         DateTime       @default(now())
  creatorId         String
  joinCode          String         @unique
  creator           User?          @relation(fields: [creatorId], references: [id])
  members           LeagueMember[]
  seasons           LeagueSeason[] // Link to seasons through a join table
  currentGameweekId String? // Optional: Points to the current active gameweek for this league
  currentGameweek   Gameweek?      @relation(fields: [currentGameweekId], references: [id])
}

model LeagueSeason {
  id         String   @id @default(cuid())
  leagueId   String
  seasonId   String
  league     League   @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  season     Season   @relation(fields: [seasonId], references: [id])
  isArchived Boolean  @default(false) // Indicates if the league is archived for this season
  createdAt  DateTime @default(now())

  @@unique([leagueId, seasonId]) // Ensure a league can only be linked to a season once
}

model LeagueMember {
  id       String    @id @default(cuid())
  userId   String
  leagueId String
  seasonId String
  joinedAt DateTime  @default(now())
  leftAt   DateTime?
  league   League    @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  season   Season    @relation(fields: [seasonId], references: [id])
  user     User      @relation(fields: [userId], references: [id])
  points   Int       @default(0)
  correctPredictions Int @default(0)
  goalDifference Int @default(0)

  @@unique([userId, leagueId, seasonId]) // Ensure unique membership per league and season
}

model Gameweek {
  id            String               @id @default(cuid())
  number        Int
  seasonId      String
  startDate     DateTime
  endDate       DateTime
  deadline      DateTime
  status        GameweekStatus       @default(UPCOMING) // Status of the gameweek
  isComplete    Boolean              @default(false)
  season        Season               @relation("SeasonGameweeks", fields: [seasonId], references: [id])
  currentSeason Season?              @relation("CurrentGameweek")
  fixtures      GameweekFixture[]
  predictions   GameweekPrediction[]
  League        League[]

  @@unique([seasonId, number]) // Ensure unique gameweek numbers within a season
}

model GameweekFixture {
  id         String   @id @default(cuid())
  gameweekId String
  fixtureId  String
  fixture    Fixture  @relation(fields: [fixtureId], references: [id])
  gameweek   Gameweek @relation(fields: [gameweekId], references: [id])

  @@unique([gameweekId, fixtureId])
  @@index([gameweekId])
  @@index([fixtureId])
}

model Fixture {
  id          String            @id @default(cuid())
  homeTeam    String
  awayTeam    String
  kickoff     DateTime
  homeScore   Int?
  awayScore   Int?
  status      FixtureStatus     @default(SCHEDULED)
  externalId  Int?           @unique
  updatedAt   DateTime          @updatedAt
  gameweeks   GameweekFixture[]
  predictions Prediction[]

  @@index([kickoff])
  @@unique([kickoff, homeTeam, awayTeam])
}

model GameweekPrediction {
  id          String       @id @default(cuid())
  userId      String
  gameweekId  String
  seasonId    String
  // leagueId    String Removed until predictions per league is implemented
  submitted   Boolean      @default(false) // Only true if the user has submitted all predictions for this gameweek
  points      Int @default(0) // Total points scored in this gameweek
  correctPredictions Int @default(0) // Number of correct predictions made by the user
  goalDifference Int @default(0) // Difference in goals scored vs actual
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  gameweek    Gameweek     @relation(fields: [gameweekId], references: [id])
  season      Season       @relation(fields: [seasonId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
  predictions Prediction[]

  @@unique([userId, gameweekId])
}

model Prediction {
  id                   String             @id @default(cuid())
  userId               String
  fixtureId            String
  gameweekPredictionId String
  homeScore            Int
  awayScore            Int
  points               Int?
  correctScore         Boolean            @default(false) // Indicates if the prediction was correct
  goalDifference       Int?               // Difference in goals scored vs actual
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  fixture              Fixture            @relation(fields: [fixtureId], references: [id])
  gameweekPrediction   GameweekPrediction @relation(fields: [gameweekPredictionId], references: [id])
  user                 User               @relation(fields: [userId], references: [id])

  @@index([gameweekPredictionId])
  @@unique([gameweekPredictionId, fixtureId])
}

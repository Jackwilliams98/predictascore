generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // url = "postgres://default:b2VPNcRzlpg0@ep-cold-bush-a2mu2k6a-pooler.eu-central-1.aws.neon.tech/verceldb?pgbouncer=true&connect_timeout=15&sslmode=require"
  // directUrl = "postgres://default:b2VPNcRzlpg0@ep-cold-bush-a2mu2k6a.eu-central-1.aws.neon.tech/verceldb?sslmode=require"
  url = env("POSTGRES_PRISMA_URL") // Update to manual URL if needed
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Role {
  USER
  ADMIN
}

enum FixtureStatus {
  SCHEDULED
  LIVE
  FINISHED
  POSTPONED
  CANCELLED
}

model User {
  id            String    @default(cuid()) @id
  name          String?
  email         String?   @unique
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  role                Role                 @default(USER)
  gameweekPredictions GameweekPrediction[]
  createdLeagues      League[]
  leagues             LeagueMember[]
  fixturePredictions  Prediction[]
  @@map(name: "users")
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime     @default(now())
  creatorId   String
  gameweeks   Gameweek[]
  creator     User?         @relation(fields: [creatorId], references: [id])
  members     LeagueMember[]
}

model LeagueMember {
  id       String   @id @default(cuid())
  userId   String
  leagueId String
  joinedAt DateTime @default(now())
  league   League   @relation(fields: [leagueId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([userId, leagueId])
}

model Gameweek {
  id          String              @id @default(cuid())
  number      Int
  leagueId    String
  startDate   DateTime
  endDate     DateTime
  deadline    DateTime
  isComplete  Boolean             @default(false)
  league      League              @relation(fields: [leagueId], references: [id])
  fixtures    GameweekFixture[]
  predictions GameweekPrediction[]

  @@unique([leagueId, number])
}

model GameweekFixture {
  id         String   @id @default(cuid())
  gameweekId String
  fixtureId  String
  fixture    Fixture  @relation(fields: [fixtureId], references: [id])
  gameweek   Gameweek @relation(fields: [gameweekId], references: [id])

  @@unique([gameweekId, fixtureId])
  @@index([gameweekId])
  @@index([fixtureId])
}

model Fixture {
  id          String            @id @default(cuid())
  homeTeam    String
  awayTeam    String
  kickoff     DateTime
  homeScore   Int?
  awayScore   Int?
  status      FixtureStatus     @default(SCHEDULED)
  externalId  String?           @unique
  updatedAt   DateTime          @updatedAt
  gameweeks   GameweekFixture[]
  predictions Prediction[]

  @@index([kickoff])
}

model GameweekPrediction {
  id          String       @id @default(cuid())
  userId      String
  gameweekId  String
  submitted   Boolean      @default(false)
  points      Int?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  gameweek    Gameweek     @relation(fields: [gameweekId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
  predictions Prediction[]

  @@unique([userId, gameweekId])
}

model Prediction {
  id                   String             @id @default(cuid())
  userId               String
  fixtureId            String
  gameweekPredictionId String
  homeScore            Int
  awayScore            Int
  points               Int?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  fixture              Fixture            @relation(fields: [fixtureId], references: [id])
  gameweekPrediction   GameweekPrediction @relation(fields: [gameweekPredictionId], references: [id])
  user                 User               @relation(fields: [userId], references: [id])

  @@index([gameweekPredictionId])
}

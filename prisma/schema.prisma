generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // Update to manual URL if needed
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                  Int                  @id @default(autoincrement())
  email               String               @unique
  name                String?
  role                Role                 @default(USER)
  gameweekPredictions GameweekPrediction[]
  createdLeagues      League[]
  leagues             LeagueMember[]
  fixturePredictions  Prediction[]
}

model League {
  id          Int            @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime       @default(now())
  creatorId   Int
  gameweeks   Gameweek[]
  creator     User           @relation(fields: [creatorId], references: [id])
  members     LeagueMember[]
}

model LeagueMember {
  id       Int      @id @default(autoincrement())
  userId   Int
  leagueId Int
  joinedAt DateTime @default(now())
  league   League   @relation(fields: [leagueId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([userId, leagueId])
}

model Gameweek {
  id          Int                  @id @default(autoincrement())
  number      Int
  leagueId    Int
  startDate   DateTime
  endDate     DateTime
  deadline    DateTime
  isComplete  Boolean              @default(false)
  league      League               @relation(fields: [leagueId], references: [id])
  fixtures    GameweekFixture[]
  predictions GameweekPrediction[]

  @@unique([leagueId, number])
}

model GameweekFixture {
  id         Int      @id @default(autoincrement())
  gameweekId Int
  fixtureId  Int
  fixture    Fixture  @relation(fields: [fixtureId], references: [id])
  gameweek   Gameweek @relation(fields: [gameweekId], references: [id])

  @@unique([gameweekId, fixtureId])
  @@index([gameweekId])
  @@index([fixtureId])
}

model Fixture {
  id          Int               @id @default(autoincrement())
  homeTeam    String
  awayTeam    String
  kickoff     DateTime
  homeScore   Int?
  awayScore   Int?
  status      FixtureStatus     @default(SCHEDULED)
  externalId  String?           @unique
  updatedAt   DateTime          @updatedAt
  gameweeks   GameweekFixture[]
  predictions Prediction[]

  @@index([kickoff])
}

model GameweekPrediction {
  id          Int          @id @default(autoincrement())
  userId      Int
  gameweekId  Int
  submitted   Boolean      @default(false)
  points      Int?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  gameweek    Gameweek     @relation(fields: [gameweekId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
  predictions Prediction[]

  @@unique([userId, gameweekId])
}

model Prediction {
  id                   Int                @id @default(autoincrement())
  userId               Int
  fixtureId            Int
  gameweekPredictionId Int
  homeScore            Int
  awayScore            Int
  points               Int?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  fixture              Fixture            @relation(fields: [fixtureId], references: [id])
  gameweekPrediction   GameweekPrediction @relation(fields: [gameweekPredictionId], references: [id])
  user                 User               @relation(fields: [userId], references: [id])

  @@index([gameweekPredictionId])
}

enum Role {
  USER
  ADMIN
}

enum FixtureStatus {
  SCHEDULED
  LIVE
  FINISHED
  POSTPONED
  CANCELLED
}
